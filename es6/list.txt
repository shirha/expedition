./GlyphUtils.js
export async function waitForOpenCV() {
  console.log("Checking for OpenCV...");
  const cvInstance = await cv; // Assuming `cv` is globally available from opencv.js
  console.log("OpenCV initialized with properties:", Object.keys(cvInstance).length);
  return cvInstance;
}

export async function isGlyphs(tempImage, glyphSprite, cvInstance) {
  try {
    let mat = cvInstance.imread(tempImage);
    if (mat.empty()) throw new Error("Failed to load source image");

    // Crop bottom-left quarter (color) for logo canvas
    const logoWidth = 960;
    const logoHeight = 540;
    const logoX = 0;
    const logoY = mat.rows - logoHeight;
    let logoMat = mat.roi(new cvInstance.Rect(logoX, logoY, logoWidth, logoHeight));
    const logoCanvas = document.getElementById("logo");
    logoCanvas.width = logoMat.cols;
    logoCanvas.height = logoMat.rows;
    cvInstance.imshow(logoCanvas, logoMat);

    // Glyph detection (grayscale)
    let gray = new cvInstance.Mat();
    cvInstance.cvtColor(mat, gray, cvInstance.COLOR_RGBA2GRAY);
    let cropped = gray.roi(new cvInstance.Rect(11, 1015, 384, 32));
    let glyphMat = cvInstance.imread(glyphSprite);
    if (glyphMat.empty()) throw new Error("Failed to load glyph sprite");
    cvInstance.cvtColor(glyphMat, glyphMat, cvInstance.COLOR_RGBA2GRAY);

    let glyphs = "", matchScore = 0;
    let result = new cvInstance.Mat();

    for (let i = 0; i < 12; i++) {
      let roi = cropped.roi(new cvInstance.Rect(i * 32, 0, 32, 32));
      cvInstance.matchTemplate(roi, glyphMat, result, cvInstance.TM_SQDIFF_NORMED);
      
      // Sample every 32nd value from result
      let sampledResult = [];
      for (let x = 0; x < 512; x += 32) {
        let value = result.data32F[x];
        sampledResult.push(value);
      }
      
      // Find min value and index (like np.min and np.argmin)
      let minValue = Math.min(...sampledResult);
      let minIndex = sampledResult.indexOf(minValue);
      matchScore += minValue;
      glyphs += "0123456789abcdef"[minIndex];
      
      // Log it
      console.log(`${minIndex.toString().padStart(2)} [${sampledResult.map(v => v.toFixed(3)).join(", ")}]`);
      roi.delete();
    }

    // Clean up
    logoMat.delete();
    gray.delete();
    cropped.delete();
    glyphMat.delete();
    result.delete();
    mat.delete();

    console.log(`Glyphs: mn+:${matchScore.toFixed(3)} ${glyphs}`);
    return glyphs;
  } catch (error) {
    console.error("Error in isGlyphs:", error);
    throw error;
  }
}

export function renderGlyphString(glyphs, setSelectedGlyphIndex) {
  const glyphStringDiv = document.getElementById("glyph-string");
  glyphStringDiv.innerHTML = "";
  for (let i = 0; i < glyphs.length; i++) {
    const span = document.createElement("span");
    span.textContent = glyphs[i];
    span.dataset.index = i;
    span.addEventListener("click", function() {
      if (this.classList.contains("selected")) {
        this.classList.remove("selected");
        setSelectedGlyphIndex(null); // Callback to update main.js state
      } else {
        document.querySelectorAll("#glyph-string span").forEach(s => s.classList.remove("selected"));
        this.classList.add("selected");
        setSelectedGlyphIndex(parseInt(this.dataset.index));
      }
    });
    glyphStringDiv.appendChild(span);
  }
  document.getElementById("decoder").href = `https://nmsportals.github.io/#${glyphs}`;
}

export function setupGlyphSpriteClick(getSelectedGlyphIndex, setSelectedGlyphIndex) {
  const glyphSprite = document.getElementById("glyph-sprite");
  glyphSprite.addEventListener("click", function(event) {
    const selectedGlyphIndex = getSelectedGlyphIndex();
    console.log("Glyph sprite clicked, selectedGlyphIndex:", selectedGlyphIndex);
    if (selectedGlyphIndex === null) return;
    const rect = glyphSprite.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const glyphWidth = glyphSprite.width / 16;
    const glyphIndex = Math.floor(x / glyphWidth);
    const newGlyph = "0123456789abcdef"[glyphIndex];
    console.log("Updating glyph at index", selectedGlyphIndex, "to", newGlyph);
    updateGlyphString(selectedGlyphIndex, newGlyph, setSelectedGlyphIndex);
  });
}

export function updateGlyphString(index, newGlyph, setSelectedGlyphIndex) {
  const spans = document.querySelectorAll("#glyph-string span");
  spans[index].textContent = newGlyph;
  spans[index].classList.remove("selected");
  const glyphs = Array.from(spans).map(span => span.textContent).join("");
  document.getElementById("decoder").href = `https://nmsportals.github.io/#${glyphs}`;
  setSelectedGlyphIndex(null); // Reset selection state
  return glyphs; // Return updated string for convenience
}

./imageNavigation.js
import { isGlyphs, renderGlyphString } from './glyphUtils.js';

let images = [];
let currentIndex = 0;
let logoCanvasContext = null;

export function getLogoCanvasContext() {
  if (!logoCanvasContext) {
    const canvas = document.getElementById("logo");
    logoCanvasContext = canvas.getContext('2d', { willReadFrequently: true });
  }
  return logoCanvasContext;
}

export function setImages(data) {
  images = data;
}

export function nextImage(cvInstance, setSelectedGlyphIndex) {
  currentIndex = (currentIndex + 1) % images.length;
  showImage(currentIndex, cvInstance, setSelectedGlyphIndex);
}

export function prevImage(cvInstance, setSelectedGlyphIndex) {
  currentIndex = (currentIndex - 1 + images.length) % images.length;
  showImage(currentIndex, cvInstance, setSelectedGlyphIndex);
}

export function showImage(index, cvInstance, setSelectedGlyphIndex) {
  const tempImg = new Image();
  tempImg.onload = function() {
    const glyphSheet = document.getElementById("glyph-sprite");
    isGlyphs(tempImg, glyphSheet, cvInstance)
      .then(glyphs => {
        renderGlyphString(glyphs, setSelectedGlyphIndex); // Pass setSelectedGlyphIndex here
        const logoCanvas = document.getElementById("logo");
        const dataUrl = logoCanvas.toDataURL("image/png");
        document.getElementById("background-layer").style.backgroundImage = `url('${dataUrl}')`;
        setBodyBgColor(logoCanvas);
      })
      .catch(err => console.error("Error processing glyphs:", err));
  };
  tempImg.src = images[index];
  console.log(tempImg.src);
}

// setBodyBgColor remains unchanged
export function setBodyBgColor(canvas) {
  const ctx = getLogoCanvasContext();
  const x = 765;
  const y = 165;
  const pixel = ctx.getImageData(x, y, 1, 1).data;
  const [r, g, b] = pixel;

  function lightenColor([r, g, b], percent) {
    r = Math.round(r + (255 - r) * (percent / 100));
    g = Math.round(g + (255 - g) * (percent / 100));
    b = Math.round(b + (255 - b) * (percent / 100));
    return [r, g, b];
  }
  const [lr, lg, lb] = lightenColor([r, g, b], 50);

  ctx.beginPath();
  ctx.arc(x, y, 5, 0, Math.PI * 2);
  ctx.strokeStyle = `rgb(${lr}, ${lg}, ${lb})`;
  ctx.lineWidth = 2;
  ctx.stroke();

  document.body.style.backgroundColor = `rgb(${lr}, ${lg}, ${lb})`;
}

./index.html
<!DOCTYPE html>
<html>
<head>
  <title>Glyph Detector</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div id="container" class="drop-zone">
    <div id="background-layer"></div>
    <div id="instructions">Ctrl-V, Shift-Insert<br>or drag and drop<br>to add a glyphs screenshot<br>navigate with &larr; and &rarr;</div>
    <canvas id="logo"></canvas>
    <div id="glyph-string">&nbsp;</div>
    <img id="glyph-sprite" src="i/glyph_image_gray.png">
    <a id="decoder" href="https://nmsportals.github.io/" target="_blank">No Man's Sky Portals Decoder</a>
  </div>

  <script async src="https://docs.opencv.org/4.x/opencv.js" id="opencvScript"></script>
  <script type="module">
    import { onOpenCVLoaded } from './main.js';
    const opencvScript = document.getElementById('opencvScript');
    if (opencvScript.complete && window.cv) {
      console.log("opencvScript.complete");
      onOpenCVLoaded();
    } else {
      opencvScript.addEventListener('load', () => {
        console.log("opencvScript.addEvent");
        onOpenCVLoaded();
      });
    }
  </script>
</body>
</html>

./main.js
import { waitForOpenCV, isGlyphs, renderGlyphString, updateGlyphString, setupGlyphSpriteClick } from './glyphUtils.js';
import { getLogoCanvasContext, setImages, nextImage, prevImage, showImage, setBodyBgColor } from './imageNavigation.js';

let cvInstanceGlobal;
let selectedGlyphIndex = null;
const setSelectedGlyphIndex = index => {
  selectedGlyphIndex = index;
  console.log("Selected glyph index set to:", selectedGlyphIndex);
};
const getSelectedGlyphIndex = () => selectedGlyphIndex;

function processImage(imageDataUrl) {
  const tempImg = new Image();
  tempImg.onload = function() {
    const glyphSheet = document.getElementById("glyph-sprite");
    isGlyphs(tempImg, glyphSheet, cvInstanceGlobal)
      .then(glyphs => {
        renderGlyphString(glyphs, setSelectedGlyphIndex);
        const logoCanvas = document.getElementById("logo");
        const dataUrl = logoCanvas.toDataURL("image/png");
        document.getElementById("background-layer").style.backgroundImage = `url('${dataUrl}')`;
        setBodyBgColor(logoCanvas);
      })
      .catch(err => console.error("Error processing glyphs:", err));
  };
  tempImg.src = imageDataUrl;
}

function onOpenCVLoaded() {
  console.log("opencv.js loaded");

  waitForOpenCV()
    .then(cvInstance => {
      cvInstanceGlobal = cvInstance;
      console.log("OpenCV ready for paste and drop events");
      getLogoCanvasContext();
      setupGlyphSpriteClick(getSelectedGlyphIndex, setSelectedGlyphIndex);
    })
    .catch(err => console.error("Error initializing OpenCV:", err));

  // Paste handler
  document.onpaste = function(event) {
    const item = event.clipboardData.items[0];
    if (item.type.indexOf("image") === 0) {
      const reader = new FileReader();
      reader.onload = function(e) {
        processImage(e.target.result);
      };
      reader.readAsDataURL(item.getAsFile());
    }
  };

  // Drag-and-drop handler
  const dropZone = document.getElementById("container");
  dropZone.addEventListener("dragover", (event) => {
    event.preventDefault(); // Allow drop
    dropZone.classList.add("drag-over");
  });

  dropZone.addEventListener("dragenter", (event) => {
    event.preventDefault();
    dropZone.classList.add("drag-over");
  });

  dropZone.addEventListener("dragleave", () => {
    dropZone.classList.remove("drag-over");
  });

  dropZone.addEventListener("drop", (event) => {
    event.preventDefault();
    dropZone.classList.remove("drag-over");
    const file = event.dataTransfer.files[0];
    if (file && file.type.startsWith("image/")) {
      const reader = new FileReader();
      reader.onload = function(e) {
        processImage(e.target.result);
      };
      reader.readAsDataURL(file);
    } else {
      console.error("Dropped file is not an image");
    }
  });

  // Existing fetch and keydown logic
  fetch('glyph_filename_i.json')
    .then(response => response.json())
    .then(data => {
      setImages(data);
      showImage(0, cvInstanceGlobal, setSelectedGlyphIndex);
    })
    .catch(error => {
      console.error('Error loading JSON data:', error);
    });

  document.addEventListener('keydown', function(event) {
    if (event.key === 'ArrowRight') {
      nextImage(cvInstanceGlobal, setSelectedGlyphIndex);
    } else if (event.key === 'ArrowLeft') {
      prevImage(cvInstanceGlobal, setSelectedGlyphIndex);
    }
  });
}

export { onOpenCVLoaded };

